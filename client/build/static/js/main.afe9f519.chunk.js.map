{"version":3,"sources":["utils/API.js","components/Books.js","components/Save.js","components/SearchInput.js","components/Search.js","components/Navbar.js","App.js","registerServiceWorker.js","index.js"],"names":["API","googleBooks","query","axios","get","concat","getBooks","saveBook","bookData","post","deleteBook","id","delete","Books","props","react_default","a","createElement","className","src","image","alt","title","authors","join","description","href","link","target","saving","onClick","then","res","console","log","catch","err","Save","state","booksInput","books","data","_this","setState","_this2","this","_this3","length","map","components_Books","key","_id","Component","process","PORT","SearchInput","value","name","onChange","handleInputChange","type","htmlFor","handleFormSubmit","Search","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","_event$target","defineProperty","preventDefault","bookQuery","searched","items","modalToggled","response","endpoint","socket","socketIOClient","emit","on","components_SearchInput","volumeInfo","infoLink","imageLinks","thumbnail","Navbar","react_router_dom","to","App","components_Navbar","react_router","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.afe9f519.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    googleBooks: function (query) {\r\n        return axios.get(`https://www.googleapis.com/books/v1/volumes?q=${query}`)\r\n    },\r\n\r\n    getBooks: function () {\r\n        return axios.get(\"/api/books\")\r\n    },\r\n\r\n    saveBook: function (bookData) {\r\n        return axios.post(\"/api/books\", bookData)\r\n    },\r\n\r\n    deleteBook: function (id) {\r\n        return axios.delete(`/api/books/${id}`)\r\n    } \r\n}","import React from \"react\";\r\nimport \"./Books.css\"\r\n\r\nfunction Books(props) {\r\n    return (\r\n        <div className=\"card horizontal\">\r\n            <div className=\"card-image\">\r\n                <img className=\"book-image\" src={props.image} alt={`${props.title}`} />\r\n            </div>\r\n            <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                    <h5>Title: {props.title}</h5>\r\n                    <p>Authors: {props.authors.join()}</p>\r\n                    <p>Description: {props.description}</p>\r\n                </div>\r\n                <div className=\"card-action\" >\r\n                    <div className=\"row\">\r\n                        <a className=\"left-align col s10\" href={props.link} target=\"blank\">link to google books</a>\r\n\r\n                        {/* a boolean saving props is passed in, render a save button for true and unsave button for false*/}\r\n                        {props.saving\r\n                            ?\r\n                            (\r\n                                <a className=\"waves-effect waves-light btn\" onClick={\r\n                                    () => {\r\n                                        // props.socketEmit()\r\n                                        props.saveBook({\r\n                                            title: props.title,\r\n                                            authors: props.authors,\r\n                                            image: props.image,\r\n                                            link: props.link,\r\n                                            description: props.description\r\n                                        })\r\n                                            .then(res => {\r\n                                                console.log(res)\r\n                                                // console.log(props.socketBookResponse)\r\n                                            })\r\n                                            .catch(err => console.log(err))\r\n                                    }\r\n                                }\r\n\r\n                                >Save</a>\r\n                            ) : (\r\n                                <a className=\"waves-effect waves-light btn red col s1\" onClick={() => props.deleteBook(props.id)}>delete</a>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Books;\r\n","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\"\r\nimport Books from \"./Books\"\r\n\r\n\r\nclass Save extends Component {\r\n\r\n    state = {\r\n        booksInput: \"\",\r\n        books: [],\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        // on load get books data and set state for render\r\n        API.getBooks()\r\n            .then(\r\n                res => {\r\n                    console.log(res.data)\r\n                    this.setState({ books: res.data })\r\n                }\r\n            );\r\n    }\r\n\r\n    // function to remove a book from mongodb by passing in the book data.\r\n    deleteBook = id => {\r\n        API.deleteBook(id)\r\n            .then(\r\n                res => {\r\n                    console.log(res.data);\r\n                    API.getBooks()\r\n                        .then(\r\n                            res => {\r\n                                this.setState({ books: res.data })\r\n                            }\r\n                        );\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2 className=\"center-align\">Books Saved</h2>\r\n                {this.state.books.length ? (\r\n                    this.state.books.map(\r\n                        books => (\r\n                            < Books\r\n                                key={books.link}\r\n                                id={books._id}\r\n                                title={books.title}\r\n                                authors={books.authors}\r\n                                image={books.image}\r\n                                link={books.link}\r\n                                description={books.description}\r\n                                deleteBook={this.deleteBook}\r\n                                saving={false}\r\n                            />\r\n                        )\r\n                    )\r\n                ) : (<h3>No saved Books</h3>)}\r\n\r\n\r\n            </div >\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Save\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./SearchInput.css\"\r\n\r\nconst PORT = process.env.PORT || 3001;\r\n\r\n\r\nfunction SearchInput(props) {\r\n    return (<form className=\"form\">\r\n        <div className=\"row\">\r\n            <div className=\"input-field\">\r\n                <input\r\n                    value={props.booksInput}\r\n                    name=\"booksInput\"\r\n                    onChange={props.handleInputChange}\r\n                    type=\"text\"\r\n                    id=\"bookSearchInput\"\r\n                />\r\n                <label htmlFor=\"bookSearchInput\">Search for a Book</label>\r\n            </div>\r\n            <button className=\"btn waves-effect waves-light\" onClick={props.handleFormSubmit}>Submit</button>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\n\r\nexport default SearchInput;\r\n","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\"\r\nimport SearchInput from \"./SearchInput\"\r\nimport Books from \"./Books\"\r\nimport socketIOClient from \"socket.io-client\"\r\n\r\nconst PORT = process.env.PORT || \"http://localhost:3001\";\r\n\r\nclass Search extends Component {\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.modalToggle = this.modalToggle.bind(this);\r\n    //     this.state = { modalToggled: false }\r\n    // }\r\n\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            booksInput: \"\",\r\n            books: [],\r\n            searched: false,\r\n            modalToggled: false,\r\n            response: false,\r\n            endpoint: PORT\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        API.getBooks()\r\n            .then(\r\n                res => (console.log(res.data))\r\n\r\n            );\r\n\r\n        // socket \r\n        const { endpoint } = this.state;\r\n        const socket = socketIOClient(endpoint);\r\n        socket.emit(\"add book\",\"socket working\")\r\n        socket.on(\"book added\", data => this.setState({ response: data }))\r\n    }\r\n\r\n    // modalToggle = event => {\r\n    //     this.setState(prevState => {\r\n    //         modalToggled: !prevState.modalToggled\r\n    //     })\r\n    // }\r\n\r\n    handleInputChange = event => {\r\n        // Getting the value and name of the input which triggered the change\r\n        const { name, value } = event.target;\r\n        // Updating the input's state\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        console.log(\"submit\")\r\n        this.bookQuery(this.state.booksInput)\r\n        this.setState(\r\n            {\r\n                booksInput: \"\",\r\n                searched: true,\r\n            }\r\n        )\r\n    };\r\n\r\n    bookQuery = query => {\r\n        console.log(query)\r\n        API.googleBooks(query).then(\r\n            res => {\r\n                console.log(res.data)\r\n                this.setState({ books: res.data.items })\r\n\r\n                // console.log(\"title\" + res.data.items[0].volumeInfo.title)\r\n                // console.log(\"author\" + res.data.items[0].volumeInfo.authors)\r\n                // console.log(\"image\" + res.data.items[0].volumeInfo.imageLinks.thumbnail)\r\n                // console.log(\"link\" + res.data.items[0].volumeInfo.infoLink)\r\n                // console.log(\"description\" + res.data.items[0].volumeInfo.description)\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { response } = this.state\r\n        return (\r\n            <div>\r\n                <h2>Search for a Book</h2>\r\n                <h5>Use the search bar to look for books, feel free to save them to the saved list.</h5>\r\n                <SearchInput\r\n                    handleInputChange={this.handleInputChange}\r\n                    handleFormSubmit={this.handleFormSubmit}\r\n                    booksInput={this.state.booksInput}\r\n                />\r\n\r\n\r\n                {\r\n                    this.state.searched && (\r\n                        this.state.books.length ? (\r\n                            this.state.books.map(\r\n                                books => (\r\n                                    < Books\r\n                                        key={books.volumeInfo.infoLink}\r\n                                        title={books.volumeInfo.title}\r\n                                        authors={books.volumeInfo.authors}\r\n                                        image={books.volumeInfo.imageLinks.thumbnail}\r\n                                        link={books.volumeInfo.infoLink}\r\n                                        description={books.volumeInfo.description}\r\n                                        saving={true}\r\n                                        saveBook={API.saveBook}\r\n                                        // socketBookResponse={response}\r\n                                    />\r\n                                )\r\n                            )\r\n                        ) : (<h3>No results</h3>)\r\n                    )\r\n\r\n                }\r\n\r\n\r\n                {/* <a className=\"btn\" onClick={this.modalToggle}>Modal Test</a> */}\r\n\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Search\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navbar.css\"\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <div className=\"navbar-fixed\">\r\n            <nav>\r\n                <div className=\"nav-wrapper green\">\r\n\r\n                    <a href=\"#\" className=\"brand-logo center\">Books Search</a>\r\n\r\n\r\n                    <ul className=\"right hide-on-med-and-down\">\r\n                        {/* <li className={window.location.pathname === \"/\" ? \"active\" : \"\"}> */}\r\n                        <li>\r\n                            <Link\r\n                                to=\"/\"\r\n                            >\r\n                                Search\r\n                            </Link>\r\n                        </li>\r\n                        {/* <li className={window.location.pathname === \"/save\" ? \"active\" : \"\"}> */}\r\n                        <li>\r\n                            <Link\r\n                                to=\"/save\"\r\n                            >\r\n                                Save\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Save from \"./components/Save\"\nimport Search from \"./components/Search\"\nimport Navbar from \"./components/Navbar\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n// import socketIOClient from \"socket.io-client\";\n\n// const express = require(\"express\");\n// const app = express();\n// const server = require('http').Server(app);\n// const io = require('socket.io')(server);\n\n\n// const socket = io.connect('http://localhost');\n// socket.on('news', function (data) {\n//   console.log(data);\n//   socket.emit('my other event', { my: 'data' });\n// });\n\n\nclass App extends Component {\n\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     response: false,\n  //     endpoint: \"http://localhost:3001\"\n  //   };\n  // }\n  // componentDidMount() {\n  //   const { endpoint } = this.state;\n  //   const socket = socketIOClient(endpoint);\n  //   socket.on(\"FromAPI\", data => this.setState({ response: data }));\n  // }\n\n  render() {\n    // const { response } = this.state;\n    return (\n      <Router>\n        <Navbar />\n        <div className=\"container\">\n          <Route exact path=\"/\" component={Search} />\n          <Route exact path=\"/save\" component={Save} />\n\n          {/* <div style={{ textAlign: \"center\" }}>\n            {response\n              ? <p>\n                The temperature in Florence is: {response} °F\n              </p>\n              : <p>Loading...</p>}\n          </div> */}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}